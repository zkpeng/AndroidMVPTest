package com.zkp.com.myapplication.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT_BEAN".
*/
public class ResultBeanDao extends AbstractDao<ResultBean, Void> {

    public static final String TABLENAME = "RESULT_BEAN";

    /**
     * Properties of entity ResultBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property Day = new Property(1, int.class, "day", false, "DAY");
        public final static Property Event = new Property(2, String.class, "event", false, "EVENT");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property Month = new Property(4, int.class, "month", false, "MONTH");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
    };


    public ResultBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ResultBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT_BEAN\" (" + //
                "\"DATE\" TEXT," + // 0: date
                "\"DAY\" INTEGER NOT NULL ," + // 1: day
                "\"EVENT\" TEXT," + // 2: event
                "\"ID\" TEXT," + // 3: id
                "\"MONTH\" INTEGER NOT NULL ," + // 4: month
                "\"TITLE\" TEXT);"); // 5: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResultBean entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
        stmt.bindLong(2, entity.getDay());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(3, event);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getMonth());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResultBean entity) {
        stmt.clearBindings();
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(1, date);
        }
        stmt.bindLong(2, entity.getDay());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(3, event);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getMonth());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ResultBean readEntity(Cursor cursor, int offset) {
        ResultBean entity = new ResultBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // date
            cursor.getInt(offset + 1), // day
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // event
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.getInt(offset + 4), // month
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResultBean entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDay(cursor.getInt(offset + 1));
        entity.setEvent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMonth(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ResultBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ResultBean entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
